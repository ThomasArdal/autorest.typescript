@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.TypeScript.Model
@using AutoRest.TypeScript.vanilla.Templates
@using AutoRest.TypeScript.Azure.Model
@inherits AutoRest.Core.Template<MethodTSa>

@if (!Model.IsLongRunningOperation)
{
@:@(Include(new MethodTemplate(), Model as MethodTS))
}
else
{
<text>
@EmptyLine
@(Model.GenerateMethodDocumentation(MethodTS.MethodFlavor.HttpOperationResponse))
async @(Model.Name.ToCamelCase())WithHttpOperationResponse(@(Model.MethodParameterDeclarationTS(true, true))): Promise<msRest.HttpResponse> {
  let client = @(Model.ClientReference);
  // Send request
  const initialResult: msRest.HttpResponse = await this.begin@(Model.Name.ToPascalCase())WithHttpOperationResponse(@(Model.MethodParameterDeclaration));
  const httpResponse: msRest.HttpResponse = await client.getLongRunningOperationResult(initialResult);
@if (Model.ReturnType.Body != null)
{
  @:const httpRequest = httpResponse.request;
}
  @EmptyLine
  // Deserialize Response
  let deserializedBody: { [key: string]: any } = await httpResponse.deserializedBody();
@if (Model.ReturnType.Body != null)
{
  @:@(Model.DeserializeResponse(Model.ReturnType.Body, "deserializedBody"))
}
@if (Model.ReturnType.Body != null && Model.DefaultResponse.Body != null && !Model.Responses.Any())
{
  @:@(Model.DeserializeResponse(Model.DefaultResponse.Body, "deserializedBody"))
}
  httpResponse.deserializedBody = () => Promise.resolve(deserializedBody);
  return httpResponse;
}
</text>
}