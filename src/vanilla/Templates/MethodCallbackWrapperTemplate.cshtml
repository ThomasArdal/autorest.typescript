@using AutoRest.Core.Utilities
@using AutoRest.TypeScript.Model
@inherits AutoRest.Core.Template<MethodTS>

@(Model.GenerateMethodDocumentation(MethodTS.MethodFlavor.Callback))
@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationTS(false, false))): Promise<@(Model.ReturnTypeTSString)>;
@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationTS(true, false))): Promise<@(Model.ReturnTypeTSString)>;
@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationWithCallbackTS(includeOptions: false))): void;
@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationWithCallbackTS(true, true))): void;
@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationTS(true, true)), callback?: msRest.ServiceCallback<@(Model.ReturnTypeTSString)>): any {
  if (!callback && typeof options === 'function') {
    callback = options;
    options = undefined;
  }
  const cb = callback as msRest.ServiceCallback<@(Model.ReturnTypeTSString)>;
  if (!callback) {
    return this.@(Model.Name.ToCamelCase())WithHttpOperationResponse(@(Model.MethodParameterDeclaration)).then((httpResponse: msRest.HttpResponse) => {
      return @(Model.BuildResultInitialization("httpResponse"));
    }).catch((err: Error) => {
      return Promise.reject(err);
    });
  } else {
    msRest.promiseToCallback(this.@(Model.Name.ToCamelCase())WithHttpOperationResponse(@(Model.MethodParameterDeclaration)))((err: Error, httpResponse: msRest.HttpResponse) => {
      if (err) {
        cb(err);
      } else {
        @(Model.BuildResultInitialization("httpResponse")).then((httpResponseBody: any) => {
          cb(err, httpResponseBody, httpResponse.request, httpResponse);
        });
      }
    });
  }
}