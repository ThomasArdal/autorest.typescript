@using System.Linq;
@using AutoRest.TypeScript.Model
@inherits AutoRest.Core.Template<AutoRest.TypeScript.Model.MethodTS>
// Send Request
const httpResponse: msRest.HttpResponse = await client.sendRequest(httpRequest);
const statusCode: number = httpResponse.statusCode;
let deserializedBody: { [key: string]: any } | undefined;
if (@(Model.FailureStatusCodePredicate)) {
  deserializedBody = await httpResponse.deserializedBody();
  let errorMessage: string = deserializedBody.error && deserializedBody.error.message || deserializedBody.message;
  try {
@if (Model.DefaultResponse.Body != null)
{
    var deserializeErrorBody = Model.GetDeserializationString(Model.DefaultResponse.Body, "deserializedBody", "deserializedBody");
    if (!string.IsNullOrWhiteSpace(deserializeErrorBody))
    {
@:    if (deserializedBody != undefined) {
@:      @(deserializeErrorBody)
@:    }
    }
}
  } catch (deserializationError) {
    errorMessage = `Error "${deserializationError.message}" occurred in deserializing the responseBody - "${JSON.stringify(deserializedBody)}" for the default response.`;
  }
  throw new msRest.RestError(errorMessage, {
    code: deserializedBody.error && deserializedBody.error.code || deserializedBody.code,
    statusCode: httpResponse.statusCode,
    request: httpRequest,
    response: httpResponse,
    body: deserializedBody
  });
}
@if (Model.HttpMethod == AutoRest.Core.Model.HttpMethod.Head)
{
@Model.InitializeResult
}
else
{
@foreach (var responsePair in Model.Responses.Where(r => r.Value.Body != null))
{
    <text>
// Deserialize Response
if (statusCode === @MethodTS.GetStatusCodeReference(responsePair.Key)) {
  deserializedBody = await httpResponse.deserializedBody();
  @(Model.DeserializeResponse(responsePair.Value.Body, "deserializedBody"))
}
    </text>
}
@if (Model.ReturnType.Body != null && Model.DefaultResponse.Body != null && !Model.Responses.Any())
{
@:deserializedBody = await httpResponse.deserializedBody();
@(Model.DeserializeResponse(Model.DefaultResponse.Body, "deserializedBody"))
}
@:httpResponse.deserializedBody = () => Promise.resolve(deserializedBody);
}
return httpResponse;