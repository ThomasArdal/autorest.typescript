@inherits AutoRest.Core.Template<AutoRest.TypeScript.Model.MethodTS>
// Send Request
const httpResponse: msRest.HttpResponse = await client.sendRequest(httpRequest);
const statusCode: number = httpResponse.statusCode;
@EmptyLine
if (@(Model.FailureStatusCodePredicate)) {
  let errorMessage = `Unexpected status code: ${statusCode}`;
  let deserializedBody: { [key: string]: any } = await httpResponse.deserializedBody();
  try {
@if (Model.DefaultResponse.Body != null)
{
    var deserializeErrorBody = Model.GetDeserializationString(Model.DefaultResponse.Body, "deserializedBody", "deserializedBody");
    if (!string.IsNullOrWhiteSpace(deserializeErrorBody))
    {
@:    if (deserializedBody != undefined) {
@:      @(deserializeErrorBody)
@:    }
    }
}
  } catch (deserializationError) {
    errorMessage = `Error "${deserializationError.message}" occurred in deserializing the responseBody - "${JSON.stringify(deserializedBody)}" for the default response.`;
  }
  const innerError: any = deserializedBody && deserializedBody.error || deserializedBody;
  if (innerError && innerError.message) {
    errorMessage = innerError.message;
  }
  throw new msRest.RestError(errorMessage, {
    code: innerError.code,
    statusCode: httpResponse.statusCode,
    request: httpRequest,
    response: httpResponse,
    body: innerError
  });
}
return httpResponse;