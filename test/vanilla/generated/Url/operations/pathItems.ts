/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import { AutoRestUrlTestService } from "../autoRestUrlTestService";

/** Class representing a PathItems. */
export class PathItems {
  private readonly client: AutoRestUrlTestService;
  /**
   * Create a PathItems.
   * @param {AutoRestUrlTestService} client Reference to the service client.
   */
  constructor(client: AutoRestUrlTestService) {
    this.client = client;
  }

  /**
   * send globalStringPath='globalStringPath',
   * pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
   * globalStringQuery='globalStringQuery',
   * pathItemStringQuery='pathItemStringQuery',
   * localStringQuery='localStringQuery'
   *
   * @param {string} localStringPath should contain value 'localStringPath'
   *
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
   * appears in the path
   *
   * @param {PathItemsGetAllWithValuesOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getAllWithValuesWithHttpOperationResponse(localStringPath: string, pathItemStringPath: string, options?: Models.PathItemsGetAllWithValuesOptionalParams): Promise<msRest.HttpResponse> {
    let client = this.client;
    let localStringQuery = (options && options.localStringQuery !== undefined) ? options.localStringQuery : undefined;
    let pathItemStringQuery = (options && options.pathItemStringQuery !== undefined) ? options.pathItemStringQuery : undefined;
    // Validate
    try {
      if (localStringPath == undefined || typeof localStringPath !== "string") {
        throw new Error('localStringPath cannot be null or undefined and it must be of type string.');
      }
      if (localStringQuery != undefined && typeof localStringQuery !== "string") {
        throw new Error('localStringQuery must be of type string.');
      }
      if (pathItemStringPath == undefined || typeof pathItemStringPath !== "string") {
        throw new Error('pathItemStringPath cannot be null or undefined and it must be of type string.');
      }
      if (pathItemStringQuery != undefined && typeof pathItemStringQuery !== "string") {
        throw new Error('pathItemStringQuery must be of type string.');
      }
      if (this.client.globalStringPath == undefined || typeof this.client.globalStringPath !== "string") {
        throw new Error('this.client.globalStringPath cannot be null or undefined and it must be of type string.');
      }
      if (this.client.globalStringQuery != undefined && typeof this.client.globalStringQuery !== "string") {
        throw new Error('this.client.globalStringQuery must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery';
    requestUrl = requestUrl.replace('{localStringPath}', encodeURIComponent(localStringPath));
    requestUrl = requestUrl.replace('{pathItemStringPath}', encodeURIComponent(pathItemStringPath));
    requestUrl = requestUrl.replace('{globalStringPath}', encodeURIComponent(this.client.globalStringPath));
    let queryParamsArray: Array<any> = [];
    if (localStringQuery !== null && localStringQuery !== undefined) {
      queryParamsArray.push('localStringQuery=' + encodeURIComponent(localStringQuery));
    }
    if (pathItemStringQuery !== null && pathItemStringQuery !== undefined) {
      queryParamsArray.push('pathItemStringQuery=' + encodeURIComponent(pathItemStringQuery));
    }
    if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined) {
      queryParamsArray.push('globalStringQuery=' + encodeURIComponent(this.client.globalStringQuery));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    const httpRequest = new msRest.HttpRequest({ method: "GET", url: requestUrl });
    // Set Headers
    httpRequest.headers.set("Content-Type", "application/json; charset=utf-8");
    if(options && options.customHeaders) {
      for(const headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers.set(headerName, options.customHeaders[headerName]);
        }
      }
    }
    // Send Request
    const httpResponse: msRest.HttpResponse = await client.sendRequest(httpRequest);
    const statusCode: number = httpResponse.statusCode;
    let deserializedBody: { [key: string]: any } | undefined;
    if (statusCode !== 200) {
      deserializedBody = await httpResponse.deserializedBody();
      let errorMessage: string = deserializedBody.error && deserializedBody.error.message || deserializedBody.message;
      try {
        if (deserializedBody != undefined) {
          const resultMapper = Mappers.ErrorModel;
          deserializedBody = client.serializer.deserialize(resultMapper, deserializedBody, 'deserializedBody');
        }
      } catch (deserializationError) {
        errorMessage = `Error "${deserializationError.message}" occurred in deserializing the responseBody - "${JSON.stringify(deserializedBody)}" for the default response.`;
      }
      throw new msRest.RestError(errorMessage, {
        code: deserializedBody.error && deserializedBody.error.code || deserializedBody.code,
        statusCode: httpResponse.statusCode,
        request: httpRequest,
        response: httpResponse,
        body: deserializedBody
      });
    }
    httpResponse.deserializedBody = () => Promise.resolve(deserializedBody);
    return httpResponse;
  }

  /**
   * send globalStringPath='globalStringPath',
   * pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
   * globalStringQuery=null, pathItemStringQuery='pathItemStringQuery',
   * localStringQuery='localStringQuery'
   *
   * @param {string} localStringPath should contain value 'localStringPath'
   *
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
   * appears in the path
   *
   * @param {PathItemsGetGlobalQueryNullOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getGlobalQueryNullWithHttpOperationResponse(localStringPath: string, pathItemStringPath: string, options?: Models.PathItemsGetGlobalQueryNullOptionalParams): Promise<msRest.HttpResponse> {
    let client = this.client;
    let localStringQuery = (options && options.localStringQuery !== undefined) ? options.localStringQuery : undefined;
    let pathItemStringQuery = (options && options.pathItemStringQuery !== undefined) ? options.pathItemStringQuery : undefined;
    // Validate
    try {
      if (localStringPath == undefined || typeof localStringPath !== "string") {
        throw new Error('localStringPath cannot be null or undefined and it must be of type string.');
      }
      if (localStringQuery != undefined && typeof localStringQuery !== "string") {
        throw new Error('localStringQuery must be of type string.');
      }
      if (pathItemStringPath == undefined || typeof pathItemStringPath !== "string") {
        throw new Error('pathItemStringPath cannot be null or undefined and it must be of type string.');
      }
      if (pathItemStringQuery != undefined && typeof pathItemStringQuery !== "string") {
        throw new Error('pathItemStringQuery must be of type string.');
      }
      if (this.client.globalStringPath == undefined || typeof this.client.globalStringPath !== "string") {
        throw new Error('this.client.globalStringPath cannot be null or undefined and it must be of type string.');
      }
      if (this.client.globalStringQuery != undefined && typeof this.client.globalStringQuery !== "string") {
        throw new Error('this.client.globalStringQuery must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery';
    requestUrl = requestUrl.replace('{localStringPath}', encodeURIComponent(localStringPath));
    requestUrl = requestUrl.replace('{pathItemStringPath}', encodeURIComponent(pathItemStringPath));
    requestUrl = requestUrl.replace('{globalStringPath}', encodeURIComponent(this.client.globalStringPath));
    let queryParamsArray: Array<any> = [];
    if (localStringQuery !== null && localStringQuery !== undefined) {
      queryParamsArray.push('localStringQuery=' + encodeURIComponent(localStringQuery));
    }
    if (pathItemStringQuery !== null && pathItemStringQuery !== undefined) {
      queryParamsArray.push('pathItemStringQuery=' + encodeURIComponent(pathItemStringQuery));
    }
    if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined) {
      queryParamsArray.push('globalStringQuery=' + encodeURIComponent(this.client.globalStringQuery));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    const httpRequest = new msRest.HttpRequest({ method: "GET", url: requestUrl });
    // Set Headers
    httpRequest.headers.set("Content-Type", "application/json; charset=utf-8");
    if(options && options.customHeaders) {
      for(const headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers.set(headerName, options.customHeaders[headerName]);
        }
      }
    }
    // Send Request
    const httpResponse: msRest.HttpResponse = await client.sendRequest(httpRequest);
    const statusCode: number = httpResponse.statusCode;
    let deserializedBody: { [key: string]: any } | undefined;
    if (statusCode !== 200) {
      deserializedBody = await httpResponse.deserializedBody();
      let errorMessage: string = deserializedBody.error && deserializedBody.error.message || deserializedBody.message;
      try {
        if (deserializedBody != undefined) {
          const resultMapper = Mappers.ErrorModel;
          deserializedBody = client.serializer.deserialize(resultMapper, deserializedBody, 'deserializedBody');
        }
      } catch (deserializationError) {
        errorMessage = `Error "${deserializationError.message}" occurred in deserializing the responseBody - "${JSON.stringify(deserializedBody)}" for the default response.`;
      }
      throw new msRest.RestError(errorMessage, {
        code: deserializedBody.error && deserializedBody.error.code || deserializedBody.code,
        statusCode: httpResponse.statusCode,
        request: httpRequest,
        response: httpResponse,
        body: deserializedBody
      });
    }
    httpResponse.deserializedBody = () => Promise.resolve(deserializedBody);
    return httpResponse;
  }

  /**
   * send globalStringPath=globalStringPath,
   * pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
   * globalStringQuery=null, pathItemStringQuery='pathItemStringQuery',
   * localStringQuery=null
   *
   * @param {string} localStringPath should contain value 'localStringPath'
   *
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
   * appears in the path
   *
   * @param {PathItemsGetGlobalAndLocalQueryNullOptionalParams} [options]
   * Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getGlobalAndLocalQueryNullWithHttpOperationResponse(localStringPath: string, pathItemStringPath: string, options?: Models.PathItemsGetGlobalAndLocalQueryNullOptionalParams): Promise<msRest.HttpResponse> {
    let client = this.client;
    let localStringQuery = (options && options.localStringQuery !== undefined) ? options.localStringQuery : undefined;
    let pathItemStringQuery = (options && options.pathItemStringQuery !== undefined) ? options.pathItemStringQuery : undefined;
    // Validate
    try {
      if (localStringPath == undefined || typeof localStringPath !== "string") {
        throw new Error('localStringPath cannot be null or undefined and it must be of type string.');
      }
      if (localStringQuery != undefined && typeof localStringQuery !== "string") {
        throw new Error('localStringQuery must be of type string.');
      }
      if (pathItemStringPath == undefined || typeof pathItemStringPath !== "string") {
        throw new Error('pathItemStringPath cannot be null or undefined and it must be of type string.');
      }
      if (pathItemStringQuery != undefined && typeof pathItemStringQuery !== "string") {
        throw new Error('pathItemStringQuery must be of type string.');
      }
      if (this.client.globalStringPath == undefined || typeof this.client.globalStringPath !== "string") {
        throw new Error('this.client.globalStringPath cannot be null or undefined and it must be of type string.');
      }
      if (this.client.globalStringQuery != undefined && typeof this.client.globalStringQuery !== "string") {
        throw new Error('this.client.globalStringQuery must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null';
    requestUrl = requestUrl.replace('{localStringPath}', encodeURIComponent(localStringPath));
    requestUrl = requestUrl.replace('{pathItemStringPath}', encodeURIComponent(pathItemStringPath));
    requestUrl = requestUrl.replace('{globalStringPath}', encodeURIComponent(this.client.globalStringPath));
    let queryParamsArray: Array<any> = [];
    if (localStringQuery !== null && localStringQuery !== undefined) {
      queryParamsArray.push('localStringQuery=' + encodeURIComponent(localStringQuery));
    }
    if (pathItemStringQuery !== null && pathItemStringQuery !== undefined) {
      queryParamsArray.push('pathItemStringQuery=' + encodeURIComponent(pathItemStringQuery));
    }
    if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined) {
      queryParamsArray.push('globalStringQuery=' + encodeURIComponent(this.client.globalStringQuery));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    const httpRequest = new msRest.HttpRequest({ method: "GET", url: requestUrl });
    // Set Headers
    httpRequest.headers.set("Content-Type", "application/json; charset=utf-8");
    if(options && options.customHeaders) {
      for(const headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers.set(headerName, options.customHeaders[headerName]);
        }
      }
    }
    // Send Request
    const httpResponse: msRest.HttpResponse = await client.sendRequest(httpRequest);
    const statusCode: number = httpResponse.statusCode;
    let deserializedBody: { [key: string]: any } | undefined;
    if (statusCode !== 200) {
      deserializedBody = await httpResponse.deserializedBody();
      let errorMessage: string = deserializedBody.error && deserializedBody.error.message || deserializedBody.message;
      try {
        if (deserializedBody != undefined) {
          const resultMapper = Mappers.ErrorModel;
          deserializedBody = client.serializer.deserialize(resultMapper, deserializedBody, 'deserializedBody');
        }
      } catch (deserializationError) {
        errorMessage = `Error "${deserializationError.message}" occurred in deserializing the responseBody - "${JSON.stringify(deserializedBody)}" for the default response.`;
      }
      throw new msRest.RestError(errorMessage, {
        code: deserializedBody.error && deserializedBody.error.code || deserializedBody.code,
        statusCode: httpResponse.statusCode,
        request: httpRequest,
        response: httpResponse,
        body: deserializedBody
      });
    }
    httpResponse.deserializedBody = () => Promise.resolve(deserializedBody);
    return httpResponse;
  }

  /**
   * send globalStringPath='globalStringPath',
   * pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
   * globalStringQuery='globalStringQuery', pathItemStringQuery=null,
   * localStringQuery=null
   *
   * @param {string} localStringPath should contain value 'localStringPath'
   *
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
   * appears in the path
   *
   * @param {PathItemsGetLocalPathItemQueryNullOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getLocalPathItemQueryNullWithHttpOperationResponse(localStringPath: string, pathItemStringPath: string, options?: Models.PathItemsGetLocalPathItemQueryNullOptionalParams): Promise<msRest.HttpResponse> {
    let client = this.client;
    let localStringQuery = (options && options.localStringQuery !== undefined) ? options.localStringQuery : undefined;
    let pathItemStringQuery = (options && options.pathItemStringQuery !== undefined) ? options.pathItemStringQuery : undefined;
    // Validate
    try {
      if (localStringPath == undefined || typeof localStringPath !== "string") {
        throw new Error('localStringPath cannot be null or undefined and it must be of type string.');
      }
      if (localStringQuery != undefined && typeof localStringQuery !== "string") {
        throw new Error('localStringQuery must be of type string.');
      }
      if (pathItemStringPath == undefined || typeof pathItemStringPath !== "string") {
        throw new Error('pathItemStringPath cannot be null or undefined and it must be of type string.');
      }
      if (pathItemStringQuery != undefined && typeof pathItemStringQuery !== "string") {
        throw new Error('pathItemStringQuery must be of type string.');
      }
      if (this.client.globalStringPath == undefined || typeof this.client.globalStringPath !== "string") {
        throw new Error('this.client.globalStringPath cannot be null or undefined and it must be of type string.');
      }
      if (this.client.globalStringQuery != undefined && typeof this.client.globalStringQuery !== "string") {
        throw new Error('this.client.globalStringQuery must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null';
    requestUrl = requestUrl.replace('{localStringPath}', encodeURIComponent(localStringPath));
    requestUrl = requestUrl.replace('{pathItemStringPath}', encodeURIComponent(pathItemStringPath));
    requestUrl = requestUrl.replace('{globalStringPath}', encodeURIComponent(this.client.globalStringPath));
    let queryParamsArray: Array<any> = [];
    if (localStringQuery !== null && localStringQuery !== undefined) {
      queryParamsArray.push('localStringQuery=' + encodeURIComponent(localStringQuery));
    }
    if (pathItemStringQuery !== null && pathItemStringQuery !== undefined) {
      queryParamsArray.push('pathItemStringQuery=' + encodeURIComponent(pathItemStringQuery));
    }
    if (this.client.globalStringQuery !== null && this.client.globalStringQuery !== undefined) {
      queryParamsArray.push('globalStringQuery=' + encodeURIComponent(this.client.globalStringQuery));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    const httpRequest = new msRest.HttpRequest({ method: "GET", url: requestUrl });
    // Set Headers
    httpRequest.headers.set("Content-Type", "application/json; charset=utf-8");
    if(options && options.customHeaders) {
      for(const headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers.set(headerName, options.customHeaders[headerName]);
        }
      }
    }
    // Send Request
    const httpResponse: msRest.HttpResponse = await client.sendRequest(httpRequest);
    const statusCode: number = httpResponse.statusCode;
    let deserializedBody: { [key: string]: any } | undefined;
    if (statusCode !== 200) {
      deserializedBody = await httpResponse.deserializedBody();
      let errorMessage: string = deserializedBody.error && deserializedBody.error.message || deserializedBody.message;
      try {
        if (deserializedBody != undefined) {
          const resultMapper = Mappers.ErrorModel;
          deserializedBody = client.serializer.deserialize(resultMapper, deserializedBody, 'deserializedBody');
        }
      } catch (deserializationError) {
        errorMessage = `Error "${deserializationError.message}" occurred in deserializing the responseBody - "${JSON.stringify(deserializedBody)}" for the default response.`;
      }
      throw new msRest.RestError(errorMessage, {
        code: deserializedBody.error && deserializedBody.error.code || deserializedBody.code,
        statusCode: httpResponse.statusCode,
        request: httpRequest,
        response: httpResponse,
        body: deserializedBody
      });
    }
    httpResponse.deserializedBody = () => Promise.resolve(deserializedBody);
    return httpResponse;
  }

  /**
   * send globalStringPath='globalStringPath',
   * pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
   * globalStringQuery='globalStringQuery',
   * pathItemStringQuery='pathItemStringQuery',
   * localStringQuery='localStringQuery'
   *
   * @param {string} localStringPath should contain value 'localStringPath'
   *
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
   * appears in the path
   *
   * @param {PathItemsGetAllWithValuesOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllWithValues(localStringPath: string, pathItemStringPath: string): Promise<void>;
  getAllWithValues(localStringPath: string, pathItemStringPath: string, options: Models.PathItemsGetAllWithValuesOptionalParams): Promise<void>;
  getAllWithValues(localStringPath: string, pathItemStringPath: string, callback: msRest.ServiceCallback<void>): void;
  getAllWithValues(localStringPath: string, pathItemStringPath: string, options: Models.PathItemsGetAllWithValuesOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getAllWithValues(localStringPath: string, pathItemStringPath: string, options?: Models.PathItemsGetAllWithValuesOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    const cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.getAllWithValuesWithHttpOperationResponse(localStringPath, pathItemStringPath, options).then((httpResponse: msRest.HttpResponse) => {
        return httpResponse.deserializedBody();
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getAllWithValuesWithHttpOperationResponse(localStringPath, pathItemStringPath, options))((err: Error, httpResponse: msRest.HttpResponse) => {
        if (err) {
          cb(err);
        } else {
          httpResponse.deserializedBody().then((httpResponseBody: any) => {
            cb(err, httpResponseBody, httpResponse.request, httpResponse);
          });
        }
      });
    }
  }

  /**
   * send globalStringPath='globalStringPath',
   * pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
   * globalStringQuery=null, pathItemStringQuery='pathItemStringQuery',
   * localStringQuery='localStringQuery'
   *
   * @param {string} localStringPath should contain value 'localStringPath'
   *
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
   * appears in the path
   *
   * @param {PathItemsGetGlobalQueryNullOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getGlobalQueryNull(localStringPath: string, pathItemStringPath: string): Promise<void>;
  getGlobalQueryNull(localStringPath: string, pathItemStringPath: string, options: Models.PathItemsGetGlobalQueryNullOptionalParams): Promise<void>;
  getGlobalQueryNull(localStringPath: string, pathItemStringPath: string, callback: msRest.ServiceCallback<void>): void;
  getGlobalQueryNull(localStringPath: string, pathItemStringPath: string, options: Models.PathItemsGetGlobalQueryNullOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getGlobalQueryNull(localStringPath: string, pathItemStringPath: string, options?: Models.PathItemsGetGlobalQueryNullOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    const cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.getGlobalQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options).then((httpResponse: msRest.HttpResponse) => {
        return httpResponse.deserializedBody();
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getGlobalQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options))((err: Error, httpResponse: msRest.HttpResponse) => {
        if (err) {
          cb(err);
        } else {
          httpResponse.deserializedBody().then((httpResponseBody: any) => {
            cb(err, httpResponseBody, httpResponse.request, httpResponse);
          });
        }
      });
    }
  }

  /**
   * send globalStringPath=globalStringPath,
   * pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
   * globalStringQuery=null, pathItemStringQuery='pathItemStringQuery',
   * localStringQuery=null
   *
   * @param {string} localStringPath should contain value 'localStringPath'
   *
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
   * appears in the path
   *
   * @param {PathItemsGetGlobalAndLocalQueryNullOptionalParams} [options]
   * Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getGlobalAndLocalQueryNull(localStringPath: string, pathItemStringPath: string): Promise<void>;
  getGlobalAndLocalQueryNull(localStringPath: string, pathItemStringPath: string, options: Models.PathItemsGetGlobalAndLocalQueryNullOptionalParams): Promise<void>;
  getGlobalAndLocalQueryNull(localStringPath: string, pathItemStringPath: string, callback: msRest.ServiceCallback<void>): void;
  getGlobalAndLocalQueryNull(localStringPath: string, pathItemStringPath: string, options: Models.PathItemsGetGlobalAndLocalQueryNullOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getGlobalAndLocalQueryNull(localStringPath: string, pathItemStringPath: string, options?: Models.PathItemsGetGlobalAndLocalQueryNullOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    const cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.getGlobalAndLocalQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options).then((httpResponse: msRest.HttpResponse) => {
        return httpResponse.deserializedBody();
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getGlobalAndLocalQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options))((err: Error, httpResponse: msRest.HttpResponse) => {
        if (err) {
          cb(err);
        } else {
          httpResponse.deserializedBody().then((httpResponseBody: any) => {
            cb(err, httpResponseBody, httpResponse.request, httpResponse);
          });
        }
      });
    }
  }

  /**
   * send globalStringPath='globalStringPath',
   * pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
   * globalStringQuery='globalStringQuery', pathItemStringQuery=null,
   * localStringQuery=null
   *
   * @param {string} localStringPath should contain value 'localStringPath'
   *
   * @param {string} pathItemStringPath A string value 'pathItemStringPath' that
   * appears in the path
   *
   * @param {PathItemsGetLocalPathItemQueryNullOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getLocalPathItemQueryNull(localStringPath: string, pathItemStringPath: string): Promise<void>;
  getLocalPathItemQueryNull(localStringPath: string, pathItemStringPath: string, options: Models.PathItemsGetLocalPathItemQueryNullOptionalParams): Promise<void>;
  getLocalPathItemQueryNull(localStringPath: string, pathItemStringPath: string, callback: msRest.ServiceCallback<void>): void;
  getLocalPathItemQueryNull(localStringPath: string, pathItemStringPath: string, options: Models.PathItemsGetLocalPathItemQueryNullOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getLocalPathItemQueryNull(localStringPath: string, pathItemStringPath: string, options?: Models.PathItemsGetLocalPathItemQueryNullOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    const cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.getLocalPathItemQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options).then((httpResponse: msRest.HttpResponse) => {
        return httpResponse.deserializedBody();
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getLocalPathItemQueryNullWithHttpOperationResponse(localStringPath, pathItemStringPath, options))((err: Error, httpResponse: msRest.HttpResponse) => {
        if (err) {
          cb(err);
        } else {
          httpResponse.deserializedBody().then((httpResponseBody: any) => {
            cb(err, httpResponseBody, httpResponse.request, httpResponse);
          });
        }
      });
    }
  }

}
