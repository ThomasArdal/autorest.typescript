/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Mappers from "../models/mappers";
import { AutoRestSwaggerBATFileService } from "../autoRestSwaggerBATFileService";

/** Class representing a Files. */
export class Files {
  private readonly client: AutoRestSwaggerBATFileService;
  /**
   * Create a Files.
   * @param {AutoRestSwaggerBATFileService} client Reference to the service client.
   */
  constructor(client: AutoRestSwaggerBATFileService) {
    this.client = client;
  }

  /**
   * Get file
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getFileWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    let client = this.client;

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'files/stream/nonempty';

    // Create HTTP transport objects
    const httpRequest = new msRest.HttpRequest({ method: "GET", url: requestUrl });
    // Set Headers
    httpRequest.headers.set("Content-Type", "application/json; charset=utf-8");
    if(options && options.customHeaders) {
      for(const headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers.set(headerName, options.customHeaders[headerName]);
        }
      }
    }
    // Send Request
    const httpResponse: msRest.HttpResponse = await client.sendRequest(httpRequest);
    const statusCode: number = httpResponse.statusCode;

    if (statusCode !== 200) {
      let errorMessage = `Unexpected status code: ${statusCode}`;
      let deserializedBody: { [key: string]: any } = await httpResponse.deserializedBody();
      try {
        if (deserializedBody != undefined) {
          const resultMapper = Mappers.ErrorModel;
          deserializedBody = client.serializer.deserialize(resultMapper, deserializedBody, 'deserializedBody');
        }
      } catch (deserializationError) {
        errorMessage = `Error "${deserializationError.message}" occurred in deserializing the responseBody - "${JSON.stringify(deserializedBody)}" for the default response.`;
      }
      const innerError: any = deserializedBody && deserializedBody.error || deserializedBody;
      if (innerError && innerError.message) {
        errorMessage = innerError.message;
      }
      throw new msRest.RestError(errorMessage, {
        code: innerError.code,
        statusCode: httpResponse.statusCode,
        request: httpRequest,
        response: httpResponse,
        body: innerError
      });
    }
    return httpResponse;
  }

  /**
   * Get a large file
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getFileLargeWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    let client = this.client;

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'files/stream/verylarge';

    // Create HTTP transport objects
    const httpRequest = new msRest.HttpRequest({ method: "GET", url: requestUrl });
    // Set Headers
    httpRequest.headers.set("Content-Type", "application/json; charset=utf-8");
    if(options && options.customHeaders) {
      for(const headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers.set(headerName, options.customHeaders[headerName]);
        }
      }
    }
    // Send Request
    const httpResponse: msRest.HttpResponse = await client.sendRequest(httpRequest);
    const statusCode: number = httpResponse.statusCode;

    if (statusCode !== 200) {
      let errorMessage = `Unexpected status code: ${statusCode}`;
      let deserializedBody: { [key: string]: any } = await httpResponse.deserializedBody();
      try {
        if (deserializedBody != undefined) {
          const resultMapper = Mappers.ErrorModel;
          deserializedBody = client.serializer.deserialize(resultMapper, deserializedBody, 'deserializedBody');
        }
      } catch (deserializationError) {
        errorMessage = `Error "${deserializationError.message}" occurred in deserializing the responseBody - "${JSON.stringify(deserializedBody)}" for the default response.`;
      }
      const innerError: any = deserializedBody && deserializedBody.error || deserializedBody;
      if (innerError && innerError.message) {
        errorMessage = innerError.message;
      }
      throw new msRest.RestError(errorMessage, {
        code: innerError.code,
        statusCode: httpResponse.statusCode,
        request: httpRequest,
        response: httpResponse,
        body: innerError
      });
    }
    return httpResponse;
  }

  /**
   * Get empty file
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getEmptyFileWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpResponse> {
    let client = this.client;

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'files/stream/empty';

    // Create HTTP transport objects
    const httpRequest = new msRest.HttpRequest({ method: "GET", url: requestUrl });
    // Set Headers
    httpRequest.headers.set("Content-Type", "application/json; charset=utf-8");
    if(options && options.customHeaders) {
      for(const headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers.set(headerName, options.customHeaders[headerName]);
        }
      }
    }
    // Send Request
    const httpResponse: msRest.HttpResponse = await client.sendRequest(httpRequest);
    const statusCode: number = httpResponse.statusCode;

    if (statusCode !== 200) {
      let errorMessage = `Unexpected status code: ${statusCode}`;
      let deserializedBody: { [key: string]: any } = await httpResponse.deserializedBody();
      try {
        if (deserializedBody != undefined) {
          const resultMapper = Mappers.ErrorModel;
          deserializedBody = client.serializer.deserialize(resultMapper, deserializedBody, 'deserializedBody');
        }
      } catch (deserializationError) {
        errorMessage = `Error "${deserializationError.message}" occurred in deserializing the responseBody - "${JSON.stringify(deserializedBody)}" for the default response.`;
      }
      const innerError: any = deserializedBody && deserializedBody.error || deserializedBody;
      if (innerError && innerError.message) {
        errorMessage = innerError.message;
      }
      throw new msRest.RestError(errorMessage, {
        code: innerError.code,
        statusCode: httpResponse.statusCode,
        request: httpRequest,
        response: httpResponse,
        body: innerError
      });
    }
    return httpResponse;
  }

  /**
   * Get file
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ReadableStream | NodeJS.ReadableStream | null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getFile(): Promise<ReadableStream | NodeJS.ReadableStream | null>;
  getFile(options: msRest.RequestOptionsBase): Promise<ReadableStream | NodeJS.ReadableStream | null>;
  getFile(callback: msRest.ServiceCallback<ReadableStream | NodeJS.ReadableStream | null>): void;
  getFile(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<ReadableStream | NodeJS.ReadableStream | null>): void;
  getFile(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<ReadableStream | NodeJS.ReadableStream | null>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    const cb = callback as msRest.ServiceCallback<ReadableStream | NodeJS.ReadableStream | null>;
    if (!callback) {
      return this.getFileWithHttpOperationResponse(options).then((httpResponse: msRest.HttpResponse) => {
        return Promise.resolve(httpResponse.readableStreamBody);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getFileWithHttpOperationResponse(options))((err: Error, httpResponse: msRest.HttpResponse) => {
        if (err) {
          cb(err);
        } else {
          Promise.resolve(httpResponse.readableStreamBody).then((httpResponseBody: any) => {
            cb(err, httpResponseBody, httpResponse.request, httpResponse);
          });
        }
      });
    }
  }

  /**
   * Get a large file
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ReadableStream | NodeJS.ReadableStream | null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getFileLarge(): Promise<ReadableStream | NodeJS.ReadableStream | null>;
  getFileLarge(options: msRest.RequestOptionsBase): Promise<ReadableStream | NodeJS.ReadableStream | null>;
  getFileLarge(callback: msRest.ServiceCallback<ReadableStream | NodeJS.ReadableStream | null>): void;
  getFileLarge(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<ReadableStream | NodeJS.ReadableStream | null>): void;
  getFileLarge(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<ReadableStream | NodeJS.ReadableStream | null>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    const cb = callback as msRest.ServiceCallback<ReadableStream | NodeJS.ReadableStream | null>;
    if (!callback) {
      return this.getFileLargeWithHttpOperationResponse(options).then((httpResponse: msRest.HttpResponse) => {
        return Promise.resolve(httpResponse.readableStreamBody);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getFileLargeWithHttpOperationResponse(options))((err: Error, httpResponse: msRest.HttpResponse) => {
        if (err) {
          cb(err);
        } else {
          Promise.resolve(httpResponse.readableStreamBody).then((httpResponseBody: any) => {
            cb(err, httpResponseBody, httpResponse.request, httpResponse);
          });
        }
      });
    }
  }

  /**
   * Get empty file
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ReadableStream | NodeJS.ReadableStream | null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getEmptyFile(): Promise<ReadableStream | NodeJS.ReadableStream | null>;
  getEmptyFile(options: msRest.RequestOptionsBase): Promise<ReadableStream | NodeJS.ReadableStream | null>;
  getEmptyFile(callback: msRest.ServiceCallback<ReadableStream | NodeJS.ReadableStream | null>): void;
  getEmptyFile(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<ReadableStream | NodeJS.ReadableStream | null>): void;
  getEmptyFile(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<ReadableStream | NodeJS.ReadableStream | null>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    const cb = callback as msRest.ServiceCallback<ReadableStream | NodeJS.ReadableStream | null>;
    if (!callback) {
      return this.getEmptyFileWithHttpOperationResponse(options).then((httpResponse: msRest.HttpResponse) => {
        return Promise.resolve(httpResponse.readableStreamBody);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getEmptyFileWithHttpOperationResponse(options))((err: Error, httpResponse: msRest.HttpResponse) => {
        if (err) {
          cb(err);
        } else {
          Promise.resolve(httpResponse.readableStreamBody).then((httpResponseBody: any) => {
            cb(err, httpResponseBody, httpResponse.request, httpResponse);
          });
        }
      });
    }
  }

}
